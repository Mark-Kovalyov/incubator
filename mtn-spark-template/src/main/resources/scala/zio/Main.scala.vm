package ${packageName}

import zio.*
import zio.Console.*

import java.io.IOException

sealed trait ReportError
case object InvalidEmail extends ReportError
case object ThereAreNoCosts extends ReportError

object ${mainClass} extends ZIOAppDefault {

  def run: ZIO[Any, ReportError, String] = mainf

  val mainf : ZIO[Any, ReportError, String] =
    for {
      id <- userByEmail("mail@mail.com")
      costs <- userCosts(id)
      report <- getReport(costs)
    } yield report

  def userByEmail(email: String) : ZIO[Any, ReportError, Long] = {
    if (!email.contains('@')) {
      ZIO.fail(InvalidEmail)
    } else {
      ZIO.succeed(1L)
    }
  }

  def userCosts(id : Long) : ZIO[Any, ReportError, Array[Int]] = {
    ZIO.succeed(Array[Int](1,2,3))
  }

  def getReport(arr:Array[Int]): ZIO[Any, ReportError, String] = {
    ZIO.succeed("Cool")
  }


}
